# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  CI_REGISTRY: "docker.io"
  CI_REGISTRY_IMAGE: "index.docker.io/pdsgrupo2/user-service"
  CI_REGISTRY_PASSWORD: "obertacatalunya"
  CI_REGISTRY_USER: "pdsgrupo2"

  SSH_KEY_AZURE: "ubuntu_key.pem"
  DEPLOYMENT_USER: "azureuser"
  DEPLOYMENT_HOST: "pds-eureka.francecentral.cloudapp.azure.com"
  ROOT: sudo
  # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
  # of the `Slf4jMavenTransferListener` is no longer necessary.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true


image: maven:3-openjdk-11

stages:          # List of stages for jobs, and their order of execution
  - compile
  - test
  - quality
  - build
  - docker
  - deploy


# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
cache:
  paths:
    - .m2/repository
    - target
  key: "$CI_BUILD_REF_NAME"


#
# COMPILE STAGE
#
compile-job:
  stage: compile
  artifacts:
    paths:
      - target/
  script:
    - "mvn clean compile $MAVEN_CLI_OPTS"

#
# TEST STAGE
#
unit-test-job:
  stage: test
  script:
    - "mvn -Dtest=/*Unit**  test $MAVEN_CLI_OPTS"
    - "mvn -Dtest=ArchitectureTest test $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/

integration-test-job:
  stage: test
  script:
    - "sleep 2"
    - "mvn -Dtest=/*Integration** test $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/

#
# QUALITY STAGE
#
sonarqube-check:
  stage: quality
  needs: [compile-job, unit-test-job, integration-test-job]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "2147483647"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "sonar-cache"
    paths:
      - .sonar/cache
  script:
    - "mvn verify -Dmaven.test.skip=true"
    - "mvn sonar:sonar -Dsonar.projectKey=PDS-GRUPO2-USER -Dsonar.host.url=http://pdp-pds-sq.uoclabs.uoc.es -Dsonar.login=aba9ce8ca38737a5daf083bcb808185c435d7a40 -Dsonar.projectName=PDS-GRUPO2-USER -Dsonar.java.binaries=target/classes -Dsonar.coverage.jacoco.xmlReportPaths=target/site/merged-report/jacoco.xml $MAVEN_CLI_OPTS "
  allow_failure: true
  rules:
    - if: '($CI_COMMIT_REF_SLUG == "master"  ||  $CI_COMMIT_REF_SLUG == "develop") && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "webide")'
  tags:
    - docker

#
# BUILD STAGE
#
build-job:
  stage: build
  script:
    - "mvn package -Dmaven.test.skip=true $MAVEN_CLI_OPTS"
  artifacts:
    paths:
      - target/

#
# DOCKER STAGE
#
docker-build-job:
  # Official docker image.
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  needs: [build-job]
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  only:
    - master
    - develop

#

#
# DEPLOY STAGE
#
deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  before_script:
    - chmod 400 ${SSH_KEY_AZURE}
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY_AZURE ${DEPLOYMENT_USER}@${DEPLOYMENT_HOST} "
      $ROOT docker-compose down &&
      $ROOT docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG &&
      $ROOT docker-compose up -d"
  only:
    - master
